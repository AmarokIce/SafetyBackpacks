buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://jcenter.bintray.com/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }

        if (project.enableUsingKotlin.toBoolean()) { classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$project.kotlin_version" }
    }
}

apply plugin: 'forge'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven-publish'

if (project.enableUsingKotlin.toBoolean()) {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
}

if (project.enableUsingScala.toBoolean()) {
    apply plugin: 'scala'
}

version = "${project.modVersion}"
group = "${project.modGroupId}"
archivesBaseName = "${project.modArchivesName}"

configurations {
    includeCompile
    implementation.extendsFrom includeCompile
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "minecraft"
}

repositories {
    mavenLocal()
    mavenCentral()

    flatDir {
        dirs 'libs'
    }

    maven {
        name "Amarok Maven"
        url "http://maven.snowlyicewolf.club/"
        allowInsecureProtocol true
    }

    maven {
        name "Curse Maven"
        url "https://cursemaven.com"
    }

    maven {
        name "Modrinth Maven"
        url "https://api.modrinth.com/maven"
    }
}

dependencies {
    if (project.enableUsingKotlin.toBoolean()) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "curse.maven:AJSCore-445557:$asjcore_laster"
    }

    if (project.enableUsingMysteriumLib.toBoolean()) {
        implementation "curse.maven:MysteriumLib-645051:3963822"
    }

    implementation "club.someoneice.pineapplepsychic:pineapple-psychic:${project.psychic_version}"
    implementation "club.someoneice.togocup.pineapple_tag:pineapple-tag:${project.tags_version}"
    implementation "club.someoneice.togocup.recipebook:PineappleRecipeBook:${project.recipe_book_version}"

    implementation "maven.modrinth:notenoughitems-unofficial:${project.nei_version}-GTNH"
    implementation "maven.modrinth:codechickencore-unofficial:${project.cc_version}"
    implementation "maven.modrinth:codechickenlib-unofficial:${project.cc_version}"

    implementation fileTree(dir: 'lib', includes: ['*.jar'])
}

def dependenciesList = []
if (!project.modDependencies.isEmpty()) dependenciesList.add(project.modDependencies)
if (project.enableUsingMysteriumLib.toBoolean()) dependenciesList.add("\"required-after:MysteriumLib\"")

processResources {
    inputs.property "modversion", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "moddescription", project.modDescription
    inputs.property "modname", project.modName
    inputs.property "modid", project.modId

    inputs.property "url", project.url
    inputs.property "authorList", project.authorList
    inputs.property "logo", project.logo
    inputs.property "dependencies", dependenciesList

    filesMatching("mcmod.info") {
        expand  'modversion': project.version,
                'mcversion': project.minecraft.version,
                'moddescription': project.modDescription,
                'modname': project.modName,
                'modid': project.modId,
                'url': project.url,
                'authorList': [project.authorList],
                'logo': project.logo,
                'dependencies': dependenciesList
    }
}

if (project.enableUsingMixin.toBoolean()) {
    apply from: 'mixin.gradle'
} else {
    jar {
        from {
            configurations.includeCompile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}

if (project.enableUsingMysteriumLib.toBoolean()) {
    jar {
        manifest {
            attributes 'FMLCorePlugin': "${project.patchClass}"
            attributes 'FMLCorePluginContainsFMLMod': 'true'
        }
    }
}

sourceCompatibility = targetCompatibility = "1.8"

tasks.withType(Jar).configureEach {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:all"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:all"
            }
        }
    }
}

if (project.enableUsingKotlin.toBoolean()) {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}